v7 for original, video1 and video2
catch_turning_point_dist = 1.0
self.obstacle_cost_gain = 0.08

v7.2 for original (failed), video1 and video2
catch_turning_point_dist = 2.0

v7.3 for original (failed)
catch_turning_point_dist = 1.5

v7.4 for video1 and video2
catch_turning_point_dist = 1.0
self.obstacle_cost_gain = 0.15

v7.5 for video1 and video2
catch_turning_point_dist = 1.0
self.obstacle_cost_gain = 0.12

v7.6 for video1 and video2
catch_turning_point_dist = 1.0
self.obstacle_cost_gain = 0.10

v7.7 for video1 and video2
catch_turning_point_dist = 1.0
self.obstacle_cost_gain = 0.18

v7.8 for video1 and video2
catch_turning_point_dist = 1.0
self.obstacle_cost_gain = 0.25

----- ----- ----- -----
original config for v7
class Config:
    """
    simulation parameter class
    """

    def __init__(self):
        # robot parameter
        self.max_speed = 0.5  # [m/s]
        self.min_speed = 0.0  # [m/s]
        self.max_yaw_rate = 40.0 * math.pi / 180.0  # [rad/s]
        self.max_accel = 0.2  # [m/ss]
        self.max_delta_yaw_rate = 40.0 * math.pi / 180.0  # [rad/ss]
        self.v_resolution = 0.01  # [m/s]
        self.yaw_rate_resolution = 0.1 * math.pi / 180.0  # [rad/s]
        self.dt = 0.1  # [s] Time tick for motion prediction
        self.predict_time = 1.0  # [s]
        self.check_time = 100.0 # [s] Time to check for collision - a large number
        self.to_goal_cost_gain = 0.4
        self.speed_cost_gain = 1
        self.obstacle_cost_gain = 0.08
        self.robot_stuck_flag_cons = 0.001  # constant to prevent robot stucked
        self.robot_type = dwa.RobotType.rectangle
        self.catch_goal_dist = 0.5  # [m] goal radius
        self.catch_turning_point_dist = 1.0  # [m] local goal radius
        self.obstacle_radius = 0.5  # [m] for collision check

        # if robot_type == RobotType.circle
        # Also used to check if goal is reached in both types
        self.robot_radius = 0.5  # [m] for collision check

        # if robot_type == RobotType.rectangle
        self.robot_width = 0.5  # [m] for collision check
        self.robot_length = 1.2  # [m] for collision check

        self.dist_localgoal = 5.0  # [m] distance to local goal

    @property
    def robot_type(self):
        return self._robot_type

    @robot_type.setter
    def robot_type(self, value):
        if not isinstance(value, dwa.RobotType):
            raise TypeError("robot_type must be an instance of RobotType")
        self._robot_type = value
